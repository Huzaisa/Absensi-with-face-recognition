generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  role             Role              @default(EMPLOYEE)
  createdAt        DateTime          @default(now())
  password         String
  photo            String?
  updatedAt        DateTime          @updatedAt
  attendances      Attendance[]
  Document         Document[]
  FaceRegistration FaceRegistration?
  leaves           Leave[]
  overtimes        Overtime[]
  shiftMappings    ShiftMapping[]
}

model Attendance {
  id        String       @id @default(uuid())
  userId    String
  date      DateTime
  status    String?
  clockIn   DateTime?
  clockOut  DateTime?
  createdAt DateTime     @default(now())
  isLate    Boolean      @default(false)
  updatedAt DateTime     @updatedAt
  shift     ShiftMapping @relation(fields: [userId, date], references: [userId, date])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Shift {
  id        String         @id @default(uuid())
  name      String
  startTime DateTime
  endTime   DateTime
  mappings  ShiftMapping[]
}

model ShiftMapping {
  id         String      @id @default(uuid())
  userId     String
  date       DateTime
  createdAt  DateTime    @default(now())
  shiftId    String
  Attendance Attendance?
  shift      Shift       @relation(fields: [shiftId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Overtime {
  id         String   @id @default(uuid())
  userId     String
  date       DateTime
  approved   Boolean  @default(false)
  approverId String?
  createdAt  DateTime @default(now())
  endTime    DateTime
  reason     String
  startTime  DateTime
  user       User     @relation(fields: [userId], references: [id])
}

model Leave {
  id         String      @id @default(uuid())
  userId     String
  startDate  DateTime
  endDate    DateTime
  reason     String
  approverId String?
  createdAt  DateTime    @default(now())
  status     LeaveStatus @default(PENDING)
  user       User        @relation(fields: [userId], references: [id])
}

model Document {
  id         String   @id @default(uuid())
  userId     String
  fileName   String
  filePath   String
  type       String
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model FaceRegistration {
  id           String   @id @default(uuid())
  userId       String   @unique
  imagePath    String
  createdAt    DateTime @default(now())
  faceEncoding Bytes?
  user         User     @relation(fields: [userId], references: [id])
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  EMPLOYEE
}
